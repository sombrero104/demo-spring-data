## [ Datasource 설정 ]
spring.datasource.url=jdbc:postgresql://localhost:5432/springdata
spring.datasource.username=rey
spring.datasource.password=xavier

## [ ddl-auto 옵션 ]
# 1. create: 애플리케이션이 구동될 때마다 매번 새로 스키마를 생성. (개발할 때 유용.)
# (단, 이전에 저장되었던 데이터들이 다 지워진다.)
spring.jpa.hibernate.ddl-auto=create

# 2. update: 스키마를 새로 만들지 않고, 데이터를 추가만 함. (개발 시 데이터를 보존해야 할 경우 사용.)
# 엔티티에 추가된 필드가 있다면 DB에서도 컬럼을 추가해준다. 하지만 이 기능이 좋은 것은 아니다.
# 한번 추가한 컬럼을 다시 엔티티에서 삭제해도 DB의 컬럼을 삭제해 주지는 않기 때문이다.
# 때문에 update를 사용하면 스키마가 지저분해질 수 있어서 권장하지 않는다.
# 엔티티에서 필드 이름을 변경하면 기존의 DB 컬럼명을 변경해주지 않고 새로운 컬럼이 추가된다. 기존 컬럼도 없어지지 않고 그대로 남아있게 된다.
# spring.jpa.hibernate.ddl-auto=update

# 3. validate: 스키마를 새로 만들지 않고,
# 이미 스키마는 만들어져있다는 가정하에 우리가 매핑해야될 객체의 정보가 DB에 잘 매핑이 되는지 검증만 하겠다는 의미.
# 만약 검증이 안되는 경우 애플리케이션 구동 시 에러가 발생함. (보통 사용. 서비스에서 사용하는 것을 권장.)
# spring.jpa.hibernate.ddl-auto=validate


## [ 기타 ]
# postgres 드라이버 라이브러리에서 createClob() 메소드가 없어서 발생하는 경고 메세지가 뜰 경우. (postgres의 버그.)
# spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

## SQL문을 콘솔에 출력.
spring.jpa.show-sql=true
## 위에서 출력하는 SQL문을 좀 더 읽기 쉽게 해줌.
spring.jpa.properties.hibernate.format_sql=true
